<?php

/**
 * @file
 * Contains commerce_checkout_customizations.module.
 */

use Drupal\commerce_customizations\CommerceEmailHelper;
use Drupal\commerce_customizations\CommerceShippingAjaxHelper;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function commerce_customizations_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the commerce_checkout_customizations module.
    case 'help.page.commerce_customizations':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Allows customization of many aspects of Commerce 2.x.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_preprocess_commerce_order_receipt().
 */
function commerce_customizations_preprocess_commerce_order_receipt(&$variables) {
  /** @var Drupal\commerce_order\Entity\OrderInterface $order */
  $order = $variables['order_entity'];

  $variables['customer_name'] = $order->getCustomer()->getDisplayName();
  $variables['site_url'] = \Drupal\Core\Url::fromRoute('<front>')->setAbsolute(TRUE)->toString();
  $variables['support_url'] = CommerceEmailHelper::nodeUrl(51);
  $variables['resources_url'] = CommerceEmailHelper::nodeUrl(28);
  $variables['product_registration_url'] = \Drupal\Core\Url::fromUserInput('/me/registered-products')->setAbsolute(TRUE)->toString();
  $variables['order_items'] = CommerceEmailHelper::orderItems($order);
  $variables['order_label'] = \Drupal\commerce_quote_cart\QuoteCartHelper::isPurchaseCart($order) ? t('Order') : t('Quote');
  $variables['is_quote'] = !\Drupal\commerce_quote_cart\QuoteCartHelper::isPurchaseCart($order);

  /** @var \Drupal\Core\Datetime\DateFormatterInterface $dateFormatter */
  $dateFormatter = \Drupal::service('date.formatter');

  $variables['order_date'] = $dateFormatter->format($order->getPlacedTime(), 'short');
}

/**
 * Implements hook_entity_presave().
 */
function commerce_customizations_commerce_product_presave(Drupal\Core\Entity\EntityInterface $entity) {
  /** @var \Drupal\commerce_product\Entity\ProductInterface $entity */

  if (!$entity->hasField('field_main_category')) {
    return;
  }

  $fields = [
    'field_accessory_category',
    'field_product_category',
  ];

  $targetId = NULL;

  foreach ($fields as $field) {
    if ($entity->hasField($field) && !$entity->get($field)->isEmpty()) {
      $targetId = $entity->get($field)->target_id;

      break;
    }
  }

  if (!is_null($targetId)) {
    $entity->get('field_main_category')->target_id = $targetId;
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function commerce_customizations_field_widget_form_alter(&$element, \Drupal\Core\Form\FormStateInterface $form_state, $context) {
  if (isset($element['#entity_type']) && $element['#entity_type'] == 'commerce_shipment') {
    $element['#ajax'] = [
      'callback' => 'Drupal\commerce_customizations\CommerceShippingAjaxHelper::elementCallback',
      'event' => 'click',
      'progress' => [
        'type' => 'throbber',
        'message' => NULL,
      ],
    ];
    $element['#attached']['library'][] = 'account_modal/account_modal';
  }
}
