<?php

/**
 * @file
 * Contains commerce_checkout_customizations.module.
 */

use Drupal\commerce_customizations\CommerceEmailHelper;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_help().
 */
function commerce_customizations_help($route_name, RouteMatchInterface $route_match) {
  if ($route_name === 'help.page.commerce_customizations') {
    $output = '';
    $output .= '<h3>' . t('About') . '</h3>';
    $output .= '<p>' . t('Allows customization of many aspects of Commerce 2.x.') . '</p>';
    return $output;
  }
}

/**
 * Implements hook_aluminum_storage_phone_numbers().
 */
function commerce_customizations_aluminum_storage_phone_numbers() {
  return [];
}

/**
 * Implements hook_theme_registry_alter().
 */
function commerce_customizations_theme_registry_alter(&$theme_registry) {
  if (isset($theme_registry['commerce_order__admin'])) {
    $theme_registry['commerce_order__admin']['path'] = drupal_get_path('module', 'commerce_customizations') . '/templates';
  }

  if (isset($theme_registry['commerce_order__user'])) {
    $theme_registry['commerce_order__user']['path'] = drupal_get_path('module', 'commerce_customizations') . '/templates';
  }
}

/**
 * Gets the customer name from the provided order.
 *
 * @param \Drupal\commerce_order\Entity\OrderInterface $order
 *   The order.
 *
 * @return \Drupal\Component\Render\MarkupInterface|mixed|string
 *   The customer name as markup or a string.
 */
function commerce_customizations_get_customer_name(\Drupal\commerce_order\Entity\OrderInterface $order) {
  try {
    $customer = $order->getCustomer();

    $name = '';
    if (NULL !== $customer) {
      if ($order->getCustomer()->isAnonymous()) {
        /** @var \Drupal\commerce_shipping\Entity\ShipmentInterface $shipment */
        $shipment = $order->get('shipments')->first()->entity;

        $profile = \Drupal\commerce_quote_cart\QuoteCartHelper::isPurchaseCart($order)
          ? $order->getBillingProfile()
          : $shipment->getShippingProfile();

        /** @var \Drupal\address\Plugin\Field\FieldType\AddressItem $address */
        $address = $profile->get('address')->first();

        $name = $address->getGivenName();
      } else {
        $name = (NULL !== $customer) ? $customer->getDisplayName() : '';
      }
    }

    return $name;
  } catch (\Drupal\Core\TypedData\Exception\MissingDataException $e) {
    return '';
  }

}

/**
 * Implements hook_preprocess_commerce_order_receipt().
 */
function commerce_customizations_preprocess_commerce_order_receipt(&$variables) {

  /** @var Drupal\commerce_order\Entity\OrderInterface $order */
  $order = $variables['order_entity'];

  $shipping_data = \Drupal::service('commerce_shipping.order_shipment_summary')->build($order);

  if (isset($shipping_data['shipping_profile']['#default_value'])) {
    /** @var \Drupal\profile\Entity\ProfileInterface $shipping_profile */
    $shipping_profile = $shipping_data['shipping_profile']['#default_value'];

    $variables['shipping_info'] = commerce_customizations_expand_profile_variables($shipping_profile);
  } else {
    $variables['shipping_info'] = [];
  }

  if (!$order->get('billing_profile')->isEmpty()) {
    /** @var \Drupal\profile\Entity\ProfileInterface $billing_profile */
    $billing_profile = $order->get('billing_profile')->entity;

    $variables['billing_info'] = commerce_customizations_expand_profile_variables($billing_profile);
  } else {
    $variables['billing_info'] = [];
  }

  $variables['customer_name'] = commerce_customizations_get_customer_name($order);
  $variables['site_url'] = \Drupal\Core\Url::fromRoute('<front>')->setAbsolute(TRUE)->toString();
  $variables['support_url'] = CommerceEmailHelper::nodeUrl(51);
  $variables['resources_url'] = CommerceEmailHelper::nodeUrl(28);
  $variables['product_registration_url'] = \Drupal\Core\Url::fromUserInput('/me/registered-products')->setAbsolute(TRUE)->toString();
  $variables['order_items'] = CommerceEmailHelper::orderItems($order);
  $variables['order_label'] = \Drupal\commerce_quote_cart\QuoteCartHelper::isPurchaseCart($order) ? t('Order') : t('Quote');
  $variables['is_quote'] = !\Drupal\commerce_quote_cart\QuoteCartHelper::isPurchaseCart($order);
  $variables['order_email'] = $order->getEmail();
  $variables['order_comments'] = !$order->get('field_comments')->isEmpty() ? $order->get('field_comments')->value : '';

  /** @var \Drupal\Core\Datetime\DateFormatterInterface $dateFormatter */
  $dateFormatter = \Drupal::service('date.formatter');
  $variables['order_date'] = $dateFormatter->format($order->getPlacedTime(), 'short');

  $variables['coupons'] = '';
  if ($order->hasField('coupons') && !$order->get('coupons')->isEmpty()) {
    $variables['coupons'] = \Drupal\commerce_customizations\CouponsTable::build($order);
  }

}

/**
 * @param \Drupal\profile\Entity\ProfileInterface $profile
 *   The profile.
 *
 * @return array
 *   The expanded profile variables.
 */
function commerce_customizations_expand_profile_variables(\Drupal\profile\Entity\ProfileInterface $profile) {
  try {
    /** @var \Drupal\address\Plugin\Field\FieldType\AddressItem $address */
    $address = $profile->get('address')->first();

    /** @var \Drupal\Core\Locale\CountryManagerInterface $country_manager */
    $country_manager = \Drupal::service('country_manager');
    $country_list = $country_manager->getList();

    $profile_variables = [
      'first_name' => $address->get('given_name')->getValue(),
      'last_name' => $address->get('family_name')->getValue(),
      'job_title' => $profile->get('field_job_title')->value,
      'company' => $address->get('organization')->getValue(),
      'address_line1' => $address->get('address_line1')->getValue(),
      'address_line2' => $address->get('address_line2')->getValue(),
      'city' => $address->get('locality')->getValue(),
      'state' => $address->get('administrative_area')->getValue(),
      'postal_code' => $address->get('postal_code')->getValue(),
      'country' => $country_list[$address->get('country_code')->getValue()],
      'phone' => $profile->get('field_phone_number')->value,
      'address' => $address
    ];

    return $profile_variables;
  } catch (\Drupal\Core\TypedData\Exception\MissingDataException $e) {
    return [];
  }
}

function commerce_customizations_preprocess_commerce_order(&$variables) {
  /** @var \Drupal\commerce_order\Entity\OrderInterface $order */
  $order = $variables['elements']['#commerce_order'];

  $variables['order_url'] = '/user/' . $order->getCustomerId() . '/orders/' . $order->id();
  $variables['field_comments'] = !$order->get('field_comments')->isEmpty() ? $order->get('field_comments')->value : '';
}

/**
 * Implements hook_entity_presave().
 */
function commerce_customizations_commerce_product_presave(Drupal\Core\Entity\EntityInterface $entity) {
  /** @var \Drupal\commerce_product\Entity\ProductInterface $entity */

  if ($entity->hasField('field_main_category')) {
    $fields = [
      'field_accessory_category',
      'field_product_category',
    ];

    $targetId = NULL;

    foreach ($fields as $field) {
      if ($entity->hasField($field) && !$entity->get($field)->isEmpty()) {
        $targetId = $entity->get($field)->target_id;

        break;
      }
    }

    if (NULL !== $targetId) {
      $entity->get('field_main_category')->target_id = $targetId;
    }
  }

  if ($entity->hasField('field_is_product')) {
    $entity->get('field_is_product')->value = (
      $entity->hasField('field_product_category')
      && !$entity->get('field_product_category')->isEmpty()
    );
  }
}

/**
 * Implements hook_mail_alter().
 */
function commerce_customizations_mail_alter(&$message) {
  if ($message['id'] === 'commerce_order_receipt') {
    /** @var \Drupal\commerce_order\Entity\OrderInterface $order */
    $order = $message['params']['order'];

    if (!\Drupal\commerce_quote_cart\QuoteCartHelper::isPurchaseCart($order)) {
      $message['subject'] = t('Quote #@number confirmed', [
        '@number' => $order->id(),
      ]);
    }
  }
}

/**
 * Implements hook_views_pre_render().
 */
function commerce_customizations_views_pre_render(ViewExecutable $view) {
  $view_ids = [
    'order_report_no_detail',
    'order_report',
    'order_report_products',
  ];

  if (!empty($view->footer) && in_array($view->id(), $view_ids, FALSE)) {
    foreach ($view->footer as $key => $area) {
      if ($area instanceof \Drupal\views\Plugin\views\area\Text && isset($area->options['content']['value'])) {
        $value = $area->options['content']['value'];
        if (strpos($value, '.csv') !== FALSE) {
          $query_string = \Drupal::request()->getQueryString();
          if (!empty($query_string)) {
            $area->options['content']['value'] = str_replace('.csv', '.csv?' . $query_string, $value);
          }
        }
      }
    }
  }
}
